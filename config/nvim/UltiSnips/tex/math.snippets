global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal

priority 2
# BEGIN SUPERSCRIPTS AND SUBSCRIPTS
# ------------------------------------------------ #
context "math()"
snippet "([\w]|[\}\)\]\|'])'" "Superscript" rA
`!p snip.rv = match.group(1)`^{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([a-zA-Z]|[\}\)\]\|']);" "Subscript" rA
`!p snip.rv = match.group(1)`_{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([a-zA-Z]|[\}\)\]\|'])__" "Subscript and superscript" rA
`!p snip.rv = match.group(1)`_{${1:${VISUAL:}}}^{$2}$0
endsnippet

context "math()"
snippet "([\w]|[\}\)\]\|'])sd" "Text subscript" rA
`!p snip.rv = match.group(1)`_{\mathrm{${1:${VISUAL:}}}}$0
endsnippet

context "math()"
snippet "([\w]|[\}\)\]\|'])"([\w]{1})" "Place the first \w character after the quotation mark in a subscript" rA
`!p snip.rv = match.group(1) + "^{" + match.group(2) + "}"`
endsnippet

context "math()"
snippet "([\w]|[\}\)\]\|']):([\w]{1})" "Place the first \w character after the : in a subscript" rA
`!p snip.rv = match.group(1) + "_{" + match.group(2) + "}"`
endsnippet

snippet "([a-zA-Z]|[\}\)\]\|'])00" "Automatic 0 subscript" rA
`!p snip.rv = match.group(1)`_{0}
endsnippet

context "math()"
snippet JJ "j subscript (because snippet move forward key is jk)" iA
_{j}
endsnippet

# context "math()"
# snippet "([^a-zA-Z])ee" "e^{} supercript" rA
# `!p snip.rv = match.group(1)`e^{${1:${VISUAL:}}} $0
# endsnippet

context "math()"
snippet "([\w]|[\}\)\]\|'])([-+]{2})" "Automatic +/- subscript" rA
`!p snip.rv = match.group(1) + "_{" + match.group(2)[0] + "}"`
endsnippet

snippet "([\w]|[\}\)\]\|'])\*\*" "Automatic * superscript" rA
`!p snip.rv = match.group(1)`^{*}
endsnippet

snippet "([\w]|[\}\)\]\|'])TT" "Automatic transposed superscript" rA
`!p snip.rv = match.group(1)`^{\top}
endsnippet

context "math()"
snippet "([\w]|[\}\)\]\|'])CC" "Automatic complement superscript" rA
`!p snip.rv = match.group(1)`^{\complement}
endsnippet
# ----------------------------------------- #
# END SUPERSCRIPTS AND SUBSCRIPTS


# BEGIN SEMANTIC COMMANDS (vec, tilde, etc...)
# --------------------------------------------- #
snippet "(^|[^a-zA-Z])ff" "\frac{}{}" rA
`!p snip.rv = match.group(1)`\frac{${1:${VISUAL:}}}{$2}$0
endsnippet

snippet "(^|[^a-zA-Z])tf" "\tfrac{}{}" rA
`!p snip.rv = match.group(1)`\tfrac{${1:${VISUAL:}}}{$2}$0
endsnippet

context "math()"
snippet "([^a-zA-Z\\])sq" "\sqrt (square root)" rA
`!p snip.rv = match.group(1)`\sqrt{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([^a-zA-Z\\])ll" "Logarithm with a base" rA
`!p snip.rv = match.group(1)`\log_{${1:${VISUAL:}}} $0
endsnippet


snippet "([^a-zA-Z\\])ssq" "\sqrt[n] (n-th root)" rA
`!p snip.rv = match.group(1)`\sqrt[$1]{${2:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([\W_])vv" "\vec" rA
`!p snip.rv = match.group(1)`\vec{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([\W_])uv" "\uvec" rA
`!p snip.rv = match.group(1)`\uvec{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_])mt" "\mat{} (for matrices)" rA
`!p snip.rv = match.group(1)`\mat{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_])tn" "\tensor{}" rA
`!p snip.rv = match.group(1)`\tensor{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_])wt" "\widetilde" rA
`!p snip.rv = match.group(1)`\widetilde{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_\\])hh" "\hat" rA
`!p snip.rv = match.group(1)`\hat{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_\\])bb" "\bar" rA
`!p snip.rv = match.group(1)`\bar{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "ss" "Line segment (assumes a user-defined macro)" A
`!p snip.rv = match.group(1)`\linesegment{${1:${VISUAL:}}}$0
endsnippet

# snippet "([\W_\\])cc" "Complex conjugate (assumes a user-defined macro)" rA
# `!p snip.rv = match.group(1)`\conjugate{${1:${VISUAL:}}}$0
# endsnippet

# snippet "([^a-zA-Z\\])d" "\dot" r
# `!p snip.rv = match.group(1)`\dot{${1:${VISUAL:}}}$0
# endsnippet
# 
# snippet "([^a-zA-Z\\])dd" "\ddot" r
# `!p snip.rv = match.group(1)`\ddot{${1:${VISUAL:}}}$0
# endsnippet

snippet "([^a-zA-Z\\])pV" "\pdv{}" rA
`!p snip.rv = match.group(1)`\pdvOne{${1:${VISUAL:}}} $0
endsnippet

snippet "([^a-zA-Z\\])pvv" "\pdv{}{}" rA
`!p snip.rv = match.group(1)`\pdv{$1}{$2} $0
endsnippet

snippet "([^a-zA-Z\\])ppv" "\pdvN{}{}{}" rA
`!p snip.rv = match.group(1)`\pdvN{$1}{$2}{$3} $0
endsnippet

snippet "([^a-zA-Z\\])pv3" "\pdvThree{}{}" rA
`!p snip.rv = match.group(1)`\pdvThree{$1}{$2}{$3} $0
endsnippet

snippet "([^a-zA-Z\\])dV" "\dv{}" rA
`!p snip.rv = match.group(1)`\dv{${1:${VISUAL:}}} $0
endsnippet
 
snippet "([^a-zA-Z\\])([dD])vv" "\dv{}{} or \Dv{}{}" rA
`!p snip.rv = match.group(1)`\\`!p snip.rv = match.group(2)`v{$1}{$2} $0
endsnippet

snippet "([^a-zA-Z\\])ddv" "\dv[]{}{} - Number Theory div" rA
`!p snip.rv = match.group(1)`\dv[$1]{$2}{$3} $0
endsnippet

context "math()"
snippet "([^a-zA-Z\\])aa" "Absolute value" rA
`!p snip.rv = match.group(1)`\abs{${1:${VISUAL:}}}$0
endsnippet

snippet "([^a-zA-Z\\])ipp" "Inner product" rA
`!p snip.rv = match.group(1)`\ip{${1:${VISUAL:}}}{$2}$0
endsnippet

context "math()"
snippet "([^a-zA-Z\\])nrr" "Norm" rA
`!p snip.rv = match.group(1)`\norm{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([^a-zA-Z\\])ev" "\ev{}" rA
`!p snip.rv = match.group(1)`\ev{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([^a-zA-Z\\])ang" "ang{} (Angle)" rA
`!p snip.rv = match.group(1)`\ang{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet ann "\annotate{}{} (custom command for annotated stackrel)" A
\annotate{${1:}}{${2:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([\W_\\])srr" "\stackrel{}{}" rA
`!p snip.rv = match.group(1)`\stackrel{${1:above}}{${2:${VISUAL:below}}}$0
endsnippet

snippet "([^a-zA-Z\\])bi" "Binomial symbol" r
`!p snip.rv = match.group(1)`\binom{${1:${VISUAL:}}}{$2}$0
endsnippet

# --------------------------------------------- #
# END SEMANTIC COMMANDS (vec, tilde, etc...)


# BEGIN INTEGRALS
# --------------------------------------------- #
snippet "([^\w\\])intt" "Integral with upper and lower limit" rA
`!p snip.rv = match.group(1)`\int_{$1}^{$2} $0
endsnippet

snippet "([^\w\\])innt" "Integral with symmetric upper and lower limit" rA
`!p snip.rv = match.group(1)`\int_{-$1}^{$1} $0
endsnippet

snippet "([^\w\\])int3" "\iiint" rA
`!p snip.rv = match.group(1)`\iiint
endsnippet

snippet "([^\w\\])int2" "\iint" rA
`!p snip.rv = match.group(1)`\iint
endsnippet
# END INTEGRALS
# --------------------------------------------- #


# BEGIN SUMS
# --------------------------------------------- #
context "math()"
snippet "([^\w\\])sM" "Sum with only lower limit" rA
`!p snip.rv = match.group(1)`\sum_{$1} $0
endsnippet

context "math()"
snippet "([^\w\\])smm" "Sum with upper and lower limit" rA
`!p snip.rv = match.group(1)`\sum_{$1}^{$2} $0
endsnippet

snippet "([^\w\\])smf" "Sum from negative to positive infinity" rA
`!p snip.rv = match.group(1)`\sum_{$1-\infty}^{\infty} $0
endsnippet
# --------------------------------------------- #
# END SUMS

# BEGIN LIMITS
# --------------------------------------------- #
context "math()"
snippet "([^\w\\])lmm" "\limits{}{} with upper and lower limit" rA
`!p snip.rv = match.group(1)`\limits_{$1}{$2}$0
endsnippet

context "math()"
snippet "([^\w\\])lim" "\lim_{$1 \to $2}" rA
`!p snip.rv = match.group(1)`\lim_{$1 \to $2} $0
endsnippet

snippet "([^\w\\])lmf" "Limit to infinity" rA
`!p snip.rv = match.group(1)`\lim_{${1} \to \infty} $0
endsnippet

snippet "([^\w\\])slmf" "Limit superior to infinity" rA
`!p snip.rv = match.group(1)`\limsup_{${1} \to \infty} $0
endsnippet

snippet "([^\w\\])lmz" "Limit to zero" rA
`!p snip.rv = match.group(1)`\lim_{${1} \to 0} $0
endsnippet
# --------------------------------------------- #
# END LIMITS


# BEGIN STATIC TEXT
# ------------------------------------- #
# context "math()"
# snippet and "static snippet: quad-spaced 'and' in equation" A
# \quad \text{and} \quad $0
# endsnippet
# 
# snippet forall "static snippet: 'for all'  text in equation" A
# \text{ for all } $0
# endsnippet
# 
# snippet forw "static snippet: 'for which'  text in equation" A
# \text{ for which } $0
# endsnippet
# 
# snippet forwhich "static snippet: 'for all'  text in equation" A
# \text{ for which } $0
# endsnippet
# 
# context "math()"
# snippet else "\text{otherwise}" A
# \text{otherwise}
# endsnippet
# ------------------------------------- #
# END STATIC TEXT


# BEGIN STATIC MATH SNIPPETS
# ------------------------------------- #
snippet "([\W_])inff" "\infty" rA
`!p snip.rv = match.group(1)`\infty
endsnippet

context "math()"
snippet "([\W_])intf" "Integral from negative to positive infinity" rA
`!p snip.rv = match.group(1)`\int_{-\infty}^{\infty} 
endsnippet

snippet lra "\leftrightarrow" A
\leftrightarrow 
endsnippet

context "math()"
snippet "([^a-zA-Z0-9\\])df" "\diff - differential" rA
`!p snip.rv = match.group(1)`\diff 
endsnippet

snippet "([^a-zA-Z0-9\\])gd" "\grad" r
`!p snip.rv = match.group(1)`\grad 
endsnippet

snippet "([^a-zA-Z0-9\\])lap" "\laplacian" r
`!p snip.rv = match.group(1)`\laplacian 
endsnippet

snippet "([^a-zA-Z0-9\\])cll" "\curl" rA
`!p snip.rv = match.group(1)`\curl 
endsnippet

# snippet "([lcvd])dd" "(lcvd)dots (various dots commands in one regex)" rA
# \\`!p snip.rv = match.group(1)`dots
# endsnippet
# 
# snippet ,. "\cdot" iA
# \cdot 
# endsnippet

snippet "([^a-zA-Z0-9\\])pt" "\propto - proportionate to" rA
`!p snip.rv = match.group(1)`\propto 
endsnippet

snippet "([^a-zA-Z0-9\\])px" "\approx - approximately" rA
`!p snip.rv = match.group(1)`\approx 
endsnippet

snippet prp "\perp - perpendicular" A
\perp 
endsnippet

snippet pll "\parallel" A
\parallel 
endsnippet

# ------------------------------------- #
# END STATIC MATH SNIPPETS

# --------------------------------------------- #
# LOGIC SNIPPETS
# --------------------------------------------- #

context "math()"
snippet ! "Negation symbol" i
\lnot 
endsnippet

context "math()"
snippet and "Conjunction symbol" i
\land 
endsnippet

context "math()"
snippet or "Disjunction symbol" i
\lor 
endsnippet

context "math()"
snippet >> "\implies" i
\implies 
endsnippet

context "math()"
snippet !>> "Doesn't imply" i
\nRightarrow 
endsnippet

context "math()"
snippet iff "iff symbol" i
\iff 
endsnippet

context "math()"
snippet l= "Logical equivalence" i
\equiv 
endsnippet

context "math()"
snippet tf "Therefore symbol" i
\therefore 
endsnippet

context "math()"
snippet ex "There exists symbol" i
\exists 
endsnippet

context "math()"
snippet fa "For all symbol" i
\forall 
endsnippet

# --------------------------------------------- #
# END LOGIC SNIPPETS
# --------------------------------------------- #

# --------------------------------------------- #
# SET THEORY SNIPPETS
# --------------------------------------------- #

context "math()"
snippet e "element of symbol" i 
\in 
endsnippet

context "math()"
snippet ne "not element of symbol" i
\not\in 
endsnippet

context "math()"
snippet sbb "proper subset" i
\subset 
endsnippet

context "math()"
snippet sbbe "subset or equal to set" i
\subseteq 
endsnippet

context "math()"
snippet nsbb "not a subset of" i
\not\subset 
endsnippet

context "math()"
snippet sbs "proper superset" i
\supset 
endsnippet

context "math()"
snippet sbse "superset or equal to set" i
\supseteq 
endsnippet

context "math()"
snippet u "union" i
\cup 
endsnippet

context "math()"
snippet a "intersection" i
\cap 
endsnippet

context "math()"
snippet U "Big union" i
\bigcup_{$1}^{$2}$0
endsnippet

context "math()"
snippet A "Big intersection" i
\bigcap_{$1}^{$2}$0
endsnippet

context "math()"
snippet es "empty set" i
\emptyset 
endsnippet

context "math()"
snippet ps "Power set" i
\mathcal{P} 
endsnippet

context "math()"
snippet ce "Closure" i
\overline{$1}$0
endsnippet

context "math()"
snippet stm "\setminus" i
\setminus 
endsnippet

context "math()"
snippet xx "\cross" i
\times 
endsnippet

# --------------------------------------------- #
# SET THEORY SNIPPETS
# --------------------------------------------- #

# --------------------------------------------- #
# FUNCTION SNIPPETS
# --------------------------------------------- #

context "math()"
snippet t "Maps to" i
\to 
endsnippet

context "math()"
snippet o "composition" i
\circ 
endsnippet

context "math()"
snippet pwf "Piece-wise function" i
$1($2) =
\begin{cases}
	$3 & $4 \\
	$5 & $0 \\
\end{case}
endsnippet

context "math()"
snippet >= "greater than or equal" A
\ge 
endsnippet

context "math()"
snippet <= "less than or equal" A
\le 
endsnippet

# --------------------------------------------- #
# END FUNCTION SNIPPETS
# --------------------------------------------- #

# --------------------------------------------- #
# LINEAR ALGEBRA SNIPPETS
# --------------------------------------------- #

context "math()"
snippet v "Vector arrow" i
\vec{$1}$0
endsnippet

context "math()"
snippet vb "Vector bold" i
\mathbf{$1}$0
endsnippet

context "math()"
snippet norm "vector norm" i
||\vec{$1}||$0
endsnippet

context "math()"
snippet mx "Basic Matrix" i
\left[
\begin{array}{ccc}
$1
\end{array}
\right]
endsnippet

# snippet lmx "Labeled matrix" i
# \begin{equation*}
# \begin{array}{ccc}
#     $1 & $2 & $3 
#     $4 & \left[
# 				 \begin{array}{ccc}
# 				 $0
# 				 \end{array}
# 				 \right] & \
# \end{array}
# \tag{}
# \end{equation*}
# endsnippet

context "math()"
snippet lmx "Labeled Matrix" i
\begin{blockarray}{cccc}
\ & \ & \ & \ \\
\begin{block}{c[ccc]}
\ & \ & \ & \ \\
\ & \ & \ & \ \\
\ & \ & \ & \ \\
\end{block}
\end{blockarray}
endsnippet


context "math()"
snippet detmx "Determinant in Matrix form" i
\left|
\begin{array}{ccc}
$1
\end{array}
\right|
endsnippet

context "math()"
snippet det "Determinant Representation" i
\det{$1}$0
endsnippet

context "math()"
snippet trace "Trace" i
\operatororname{tr}($1)$0
endsnippet

context "math()"
snippet dim "Dimension" i
\dim($1)$0
endsnippet

context "math()"
snippet rc "Row column i.e. n x m notation" i
$1 \times $2
endsnippet


# --------------------------------------------- #
# END LINEAR ALGEBRA SNIPPETS
# --------------------------------------------- #

# --------------------------------------------- #
# ABSTRACT ALGEBRA SNIPPETS
# --------------------------------------------- #

context "math()"
snippet lt "Lead to squiggly arrow" i
\leadsto
endsnippet

snippet == "Logically equivalent" i
\equiv 
endsnippet



# --------------------------------------------- #
# BASIC SNIPPETS
# --------------------------------------------- #

context "math()"
snippet +- "Plus or minus symbol" i
\pm 
endsnippet

context "math()"
snippet != "not equal" i
\ne 
endsnippet

context "math()"
snippet <= "Less than or equal" i
\leq 
endsnippet

context "math()"
snippet >= "Greater than or equal" i
\geq 
endsnippet

context "math()"
snippet !< "Not less than" i
\nless 
endsnippet

context "math()"
snippet !> "Not greater than" i
\ngtr 
endsnippet

context "math()"
snippet !<= "Not less than or equal" i
\nleq 
endsnippet

context "math()"
snippet !>= "Not greater than or equal" i
\ngeq 
endsnippet

context "math()"
snippet 3 "pi" i
\pi 
endsnippet

snippet hd "bottom horizontal dots" i
\ldots 
endsnippet

snippet cd "centered horizontal dots" i
\cdots 
endsnippet

snippet dd "diagonal dots" i
\ddots 
endsnippet

snippet vd "vertical dots" i
\vdots 
endsnippet

snippet dt "Regular multiplication dot" i
\cdot 
endsnippet

snippet ep "End proof - square" i
\square 
endsnippet


# --------------------------------------------- #
# BEGIN MISC
# --------------------------------------------- #


# turns b| into \big |
# turns B| into \Big |
snippet "([\W])([bB])\|" "(bB)ig |_{evaluation}" rA
`!p snip.rv = match.group(1)`\\`!p snip.rv = match.group(2)`ig|_{${1:${VISUAL:}}}$0
endsnippet

snippet ubb "The \underbrace command" A
\underbrace{${1:${VISUAL:}}}_{$2} $0
endsnippet
# --------------------------------------------- #
# END MISC
